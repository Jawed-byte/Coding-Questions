Approach: The number of decreasing subsequence partitions is equal to the length of the longest non-decreasing subsequence, 
because every non-decreasing number represents a point where a continuation of a previous decreasing subsequence is impossible. 
We don't care what the subsequences are, so the length is enough to tell us how many times a new decreasing subsequence is required.

#include <bits/stdc++.h>
using namespace std;

int splitDecreasing(vector<int>&nums) {
        vector<int> container;
        for (int i = 0; i < nums.size(); ++i) {
            if (container.size() == 0) {
                container.push_back(nums[i]);
            } else {
                int index = upper_bound(container.begin(), container.end(), nums[i]) - container.begin();
                if (index == container.size()) {
                    container.push_back(nums[i]);
                } else {
                    container[index] = nums[i];
                }
            }
        }
        return container.size();
    }

int main() {
	// your code goes here
	int t;
	cin>>t;
	while(t--){
		int n;
		cin>>n;
		vector<int> v(n);
		for(int i=0;i<n;i++)
		cin>>v[i];
		int ans = splitDecreasing(v);
		cout<<ans<<"\n";
	}
	return 0;
}
