#include<iostream>
#include<vector>
#include<string>
#include<queue>
using namespace std;
struct TreeNode{
    int val;
    bool isEnd;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val):val(val),isEnd(false),left(nullptr),right(nullptr){}
};
void buildTree(TreeNode* root,vector<string>&nums){
    for(int i=0;i<nums.size();i++){        
        TreeNode* cur=root;
        int j=0,len=nums[i].length();
        while(j<len){
            if(nums[i][j]=='0'){
                if(cur->left==nullptr){
                    cur->left=new TreeNode(len-j);
                }
                else cur->left->val=max(cur->left->val,len-j);
                cur=cur->left;
            }
            else{
                if(cur->right==nullptr){
                    cur->right=new TreeNode(len-j);
                }
                else cur->right->val=max(cur->right->val,len-j);
                cur=cur->right;
            }
            j++;
        }
        cur->isEnd=true;
    }
    return;
}
int maxDistance(vector<string>&nums){
    TreeNode* root=new TreeNode(0);
    buildTree(root,nums);
    int max_distance=0;
    queue<TreeNode*>q;
    q.push(root);
    while(!q.empty()){
        TreeNode* cur=q.front();
        q.pop();
        if(cur->left||cur->right){
            if(cur->left&&cur->right)
                max_distance=max(max_distance,cur->left->val+cur->right->val);
            else if(cur->isEnd)
                max_distance=max(max_distance,cur->left?cur->left->val:cur->right->val);
        }
        if(cur->left)q.push(cur->left);
        if(cur->right)q.push(cur->right);
    }
    return max_distance;
}
int main(){
    int n;
    scanf("%d",&n);
    vector<string>nums;
    nums.resize(n);
    for(int i=0;i<n;i++){
        //scanf("%s",&nums[i]);
        cin>>nums[i];
    }
    int max_distance=maxDistance(nums);
    printf("%d\n",max_distance);
    getchar();
    return 0;
}
